// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TwitterUser {
  id             String               @id
  name           String
  username       String
  created_at     DateTime
  tweets         TwitterTweet[]       @relation("author")
  likes          TwitterLike[]
  staged_likes   TwitterLikeStaging[]
  replying_users TwitterTweet[]       @relation("replying_users")
}

model TwitterTweet {
  id                  String                      @id
  text                String
  created_at          DateTime
  author              TwitterUser                 @relation("author", fields: [author_id], references: [id])
  author_id           String
  source              TwitterTweetSource          @relation(fields: [source_id], references: [id])
  source_id           Int
  media               TwitterMedia[]
  likes               TwitterLike[]
  staged_likes        TwitterLikeStaging[]
  in_reply_to_user    TwitterUser?                @relation("replying_users", fields: [in_reply_to_user_id], references: [id])
  in_reply_to_user_id String?
  hashtags            TwitterTweetHashtagEntity[]
  mentions            TwitterTweetMentionEntity[]
  urls                TwitterTweetUrlEntity[]
}

model TwitterTweetSource {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  tweets TwitterTweet[]
}

model TwitterHashtag {
  id             Int                         @id @default(autoincrement())
  tag            String                      @unique
  tweet_entities TwitterTweetHashtagEntity[]
}

model TwitterTweetHashtagEntity {
  id       Int            @id @default(autoincrement())
  tweet    TwitterTweet   @relation(fields: [tweet_id], references: [id])
  tweet_id String
  start    Int
  end      Int
  tag      TwitterHashtag @relation(fields: [tag_id], references: [id])
  tag_id   Int

  @@unique([tweet_id, start, end])
}

model TwitterTweetMentionEntity {
  id       Int          @id @default(autoincrement())
  tweet    TwitterTweet @relation(fields: [tweet_id], references: [id])
  tweet_id String
  start    Int
  end      Int
  username String

  @@unique([tweet_id, start, end])
}

model TwitterTweetUrlEntity {
  id           Int          @id @default(autoincrement())
  tweet        TwitterTweet @relation(fields: [tweet_id], references: [id])
  tweet_id     String
  start        Int
  end          Int
  url          String
  expanded_url String?
  display_url  String?

  @@unique([tweet_id, start, end])
}

model TwitterLike {
  index      Int          @id @default(autoincrement())
  user       TwitterUser  @relation(fields: [user_id], references: [id])
  user_id    String
  tweet      TwitterTweet @relation(fields: [tweet_id], references: [id])
  tweet_id   String
  created_at DateTime     @default(now())

  @@unique([user_id, tweet_id])
}

model TwitterLikeStaging {
  index      Int          @id @default(autoincrement())
  user       TwitterUser  @relation(fields: [user_id], references: [id])
  user_id    String
  tweet      TwitterTweet @relation(fields: [tweet_id], references: [id])
  tweet_id   String
  job        Job          @relation(fields: [job_id], references: [id])
  job_id     Int
  created_at DateTime     @default(now())

  @@unique([user_id, tweet_id, job_id])
}

model TwitterMedia {
  media_key String       @id
  type      String
  url       String
  tweet     TwitterTweet @relation(fields: [tweet_id], references: [id])
  tweet_id  String
  file      LocalFile    @relation(fields: [file_id], references: [sha256])
  file_id   Bytes
}

model LocalFile {
  sha256            Bytes          @id
  created_at        DateTime
  size              Int
  file_extension    FileExtension  @relation(fields: [file_extension_id], references: [id])
  file_extension_id Int
  mime              Mime           @relation(fields: [mime_id], references: [id])
  mime_id           Int
  media             TwitterMedia[]
}

model FileExtension {
  id    Int         @id @default(autoincrement())
  ext   String      @unique
  files LocalFile[]
}

model Mime {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  files LocalFile[]
}

// Tracks progress of different file import tasks
model Job {
  id           Int                  @id @default(autoincrement())
  type         String
  args         String
  created_at   DateTime             @default(now())
  updated_at   DateTime             @updatedAt
  staged_likes TwitterLikeStaging[]
}

// Auth storage
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
